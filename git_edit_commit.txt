커밋 변경하기

1. 이전에 작성한 커밋 수정하기 --amend
이전에 커밋했던 내용에 새로운 내용을 추가하거나 설명을 수정할 수 있습니다.
즉, 새로운 커밋을 만들지 않고 마지막 커밋에 수정사항을 포함시킨다.

>>  sample.txt 수정
>> git add sample.txt
>> git commit --amend



2. 이전에 작성한 커밋으로 돌아가기 revert
revert 명령어를 이용하면, 특정 커밋의 내용을 삭제할 수 있습니다. 
rebase -i 명령어나 reset 명령어를 통해 커밋을 삭제할 수도 있지만, 해당 커밋이 이미 공개된 상태인 경우에는 이러한 삭제 작업을 함부로 하기 어렵습니다. 
이러한 경우에는 revert 명령어를 이용해서 특정 커밋의 내용을 지우는 새로운 커밋(B')을 만들어 보다 안전하게 처리할 수 있습니다.
[A] -> [B] -> [C] -> [B'] (= [B])

>> git revert HEAD
(마지막 커밋 [C]를 되돌림. [B'] 커밋이 추가되지만 소스는 [C] 이전의 상태인 [B]와 동일)



3. 커밋을 버리고 특정 버전으로 되돌아가기 reset
>> git reset --hard HEAD~~
(두 단계 이전의 커밋으로 돌아감. 마지막 두 개의 커밋은 삭제됨.)

reset 전의 커밋은 'ORIG_HEAD'라는 이름으로 참조되므로, 이를 참조로 reset하여 위의 reset 실행 전의 상태로 되돌릴 수 있음
>> git reset --hard ORIG_HEAD



4. 다른 브랜치에서 특정 커밋을 가져와 내 브랜치에 넣기 cherry-pick
다른 브랜치의 커밋을 현재 브랜치에도 추가하고 싶을 때
특정 브랜치에 잘못 추가한 커밋을 올바른 브랜치로 옮기려고 할 때

(master 브랜치에서 다른 브랜치의 수정사항을 가져오는 예제)
>> git checkout master
>> git cherry-pick <커밋이름>
>> 충돌 발생하는 경우, 충돌 부분을 정리
>> git add sample.txt
>> git commit



5. 커밋 이력 편집하기 rebase -i
rebase 명령어에 'i' 옵션을 지정하면 커밋을 다시 쓰거나 다른 커밋과 바꿔 넣을 수 있으며 
특정 위치의 커밋을 삭제하거나 여러 커밋을 하나로 통합하는 작업을 할 수 있습니다. (다시쓰기 or 통합하기)

(통합하기)
>> git rebase -i HEAD~~ (두 단계의 커밋을 통합)
>> 텍스트 에디터가 열리면, 두번째 줄의 'pick'문자를 'squash'로 변경/저장.
[A] -> [B] -> [C] -> [D]
[A] -> [B] -> [E]

(다시쓰기)
>> git rebase -i HEAD~~
>> 수정하고자 하는 커밋의 'pick'문자를 'edit'으로 변경/저장.
>> 수정할 커밋이 체크아웃된 상태가 됨
>> sample.txt 변경 사항을 적용하고
>> git add sample.txt
>> commit --amend
>> git rebase --continue
(이 커밋 작업이 종료했다는 것을 알리려면, --continue 옵션을 지정하여 rebase 를 실행해야 함)
(만약 도중에 rebase 작업을 중지하고자 하는 경우에는 rebase에 --abort 옵션을 지정하여 실행)
[A] -> [B] -> [C] -> [D]
[A] -> [B] -> [C'] -> [D]

6. 다른 브랜치상의 커밋을 하나로 모아 병합한다. merge --squash
토픽 브랜치 안의 커밋을 한꺼번에 모아서 통합 브랜치에 병합하고자 할 때
>> git checkout master
>> git merge --squash <topic_branch>
>> sample.txt의 충돌된 내역 정리
>> git add sample.txt
>> git commit

참고 페이지
- https://rogerdudler.github.io/git-guide/index.ko.html
- https://backlog.com/git-tutorial/kr/
